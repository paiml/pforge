pub mod generator;

pub use generator::{generate_handler_registration, generate_param_struct, CodegenError};

use pforge_config::ForgeConfig;
use std::path::Path;

pub type Result<T> = std::result::Result<T, CodegenError>;

/// Generate all code from a ForgeConfig
pub fn generate_all(config: &ForgeConfig) -> Result<String> {
    let mut output = String::new();

    // Generate imports
    output.push_str("// Auto-generated by pforge\n");
    output.push_str("// DO NOT EDIT\n\n");
    output.push_str("use pforge_runtime::*;\n");
    output.push_str("use serde::{Deserialize, Serialize};\n");
    output.push_str("use schemars::JsonSchema;\n\n");

    // Generate parameter structs for each tool
    for tool in &config.tools {
        if let pforge_config::ToolDef::Native { name, params, .. } = tool {
            output.push_str(&generate_param_struct(name, params)?);
            output.push_str("\n\n");
        }
    }

    // Generate handler registration function
    output.push_str(&generate_handler_registration(config)?);

    Ok(output)
}

/// Write generated code to a file
pub fn write_generated_code(config: &ForgeConfig, output_path: &Path) -> Result<()> {
    let code = generate_all(config)?;
    std::fs::write(output_path, code)
        .map_err(|e| CodegenError::IoError(output_path.to_path_buf(), e))?;
    Ok(())
}
