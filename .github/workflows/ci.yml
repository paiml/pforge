name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all --verbose

      - name: Run integration tests
        run: cargo test --package pforge-integration-tests --verbose

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --release --verbose

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pforge-${{ matrix.os }}
          path: |
            target/release/pforge
            target/release/pforge.exe

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo tools
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-tarpaulin

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked

      - name: Generate coverage
        run: cargo tarpaulin --out Xml --all-features --workspace

      - name: Check coverage threshold
        run: |
          COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' cobertura.xml | head -1)
          COVERAGE_PCT=$(echo "$COVERAGE * 100" | bc)
          THRESHOLD=80
          echo "Coverage: ${COVERAGE_PCT}% (threshold: ${THRESHOLD}%)"
          if (( $(echo "$COVERAGE_PCT < $THRESHOLD" | bc -l) )); then
            echo "::error::Coverage ${COVERAGE_PCT}% is below threshold ${THRESHOLD}%"
            exit 1
          else
            echo "✓ Coverage threshold met: ${COVERAGE_PCT}% >= ${THRESHOLD}%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo tools
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-audit

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run cargo-audit
        run: cargo audit --deny unsound --deny yanked

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Build documentation
        run: cargo doc --no-deps --all-features

      - name: Check doc tests
        run: cargo test --doc

  mutation:
    name: Mutation Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo tools
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-mutants

      - name: Install cargo-mutants
        run: cargo install cargo-mutants --locked

      - name: Run mutation tests
        run: |
          cargo mutants --workspace --output mutants-ci.out --json
          echo "Mutation testing complete. Results in mutants-ci.out/"

      - name: Parse mutation results
        id: mutants
        run: |
          CAUGHT=$(jq '[.outcomes[] | select(.summary == "CaughtMutant")] | length' mutants-ci.out/mutants-ci.out/outcomes.json)
          MISSED=$(jq '[.outcomes[] | select(.summary == "MissedMutant")] | length' mutants-ci.out/mutants-ci.out/outcomes.json)
          TOTAL=$((CAUGHT + MISSED))
          if [ $TOTAL -gt 0 ]; then
            RATE=$((CAUGHT * 100 / TOTAL))
          else
            RATE=0
          fi
          echo "caught=$CAUGHT" >> $GITHUB_OUTPUT
          echo "missed=$MISSED" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "rate=$RATE" >> $GITHUB_OUTPUT
          echo "Mutation Score: $RATE% ($CAUGHT/$TOTAL caught)"

      - name: Check mutation threshold
        run: |
          RATE=${{ steps.mutants.outputs.rate }}
          THRESHOLD=80
          if [ $RATE -lt $THRESHOLD ]; then
            echo "::warning::Mutation score $RATE% is below threshold $THRESHOLD%"
            echo "Caught: ${{ steps.mutants.outputs.caught }}"
            echo "Missed: ${{ steps.mutants.outputs.missed }}"
            echo "Target: 90%+"
            # Don't fail CI yet - mutation testing is informational
            # exit 1
          else
            echo "✓ Mutation score $RATE% meets threshold $THRESHOLD%"
          fi

      - name: Upload mutation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-results
          path: mutants-ci.out/

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          cargo bench --package pforge-runtime -- --output-format bencher | tee benchmark-results.txt

      - name: Check performance regression
        run: |
          # Parse benchmark results and check against targets
          DISPATCH_NS=$(grep "test handler_dispatch/single_handler" benchmark-results.txt | awk '{print $5}' | sed 's/ns//')

          # Target: < 1000ns (1μs)
          DISPATCH_TARGET=1000

          if [ ! -z "$DISPATCH_NS" ]; then
            echo "Handler dispatch: ${DISPATCH_NS}ns (target: <${DISPATCH_TARGET}ns)"
            if (( $(echo "$DISPATCH_NS > $DISPATCH_TARGET" | bc -l) )); then
              echo "::error::Performance regression detected! Dispatch time ${DISPATCH_NS}ns exceeds target ${DISPATCH_TARGET}ns"
              exit 1
            else
              echo "✓ Performance target met: ${DISPATCH_NS}ns < ${DISPATCH_TARGET}ns"
            fi
          else
            echo "::warning::Could not parse dispatch benchmark result"
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.txt

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo tools
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-deny

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Check licenses and advisories
        run: cargo deny check
